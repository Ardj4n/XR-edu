#pragma once
/**
* Supsi-GE, Material management class
* This class offers methods to control the reflective properties of the assigned object (the color)
* when exposed to a light source. Additionally, has the capacity to manage textures
* These proprieties are assigned to one or more mesh object when in use.
*
* @authors D.Nasi, J.Petralli, D.Calabria
*/


class LIB_API Material :
	public virtual Object
{
private:
	/**
	@var emission
	Illumiation generated by the material
	NOT TO BE CONFUSED WITH A LIGHT, it has no effect on its proximity
	*/
	glm::vec4  emission;

	/**
	@var ambient
	Material base color
	The color assumed by the material when no light is present
	*/
	glm::vec4  ambient;

	/**
	@var diffuse
	Material illuminated color
	The color assumed when under a light source
	*/
	glm::vec4  diffuse;

	/**
	@var specular
	Material reflection color
	The color assumed when the light is completely reflected back to
	the observer
	*/
	glm::vec4  specular;

	/**
	@var shininess
	Reflective capacity
	Influences the specular area (and its likeness to metal).
	Defaults to 7
	*/
	int shininess=7;

	/**
	@var texture
	Texture image.
	Optional pointer to the memory area containing the picture to be applied.
	*/
	Texture *texture;
public:
	/**
	Constructor
	@see Object.h
	*/
	Material();

	/**
	Destructor
	@see Object.h
	*/
	~Material();

	/**
	Returns the emission color
	*/
	glm::vec4 getEmission();

	/**
	Sets the emission color
	*/
	void setEmission(glm::vec4 emission);

	/**
	Returns the ambient color
	*/
	glm::vec4 getAmbient();

	/**
	Sets the ambient color
	*/
	void setAmbient(glm::vec4 ambient);

	/**
	Returns the diffuse color
	*/
	glm::vec4 getDiffuse();

	/**
	Sets the diffuse color
	*/
	void setDiffuse(glm::vec4 diffuse);

	/**
	Returns the specular color
	*/
	glm::vec4 getSpecular();

	/**
	Sets the specular color
	*/
	void setSpecular(glm::vec4 specular);

	/**
	Returns the material shininess
	*/
	int getShininess();

	/**
	Sets the material shininess
	*/
	void setShininess(int shininess);

	/**
	Either returns the Material's texture pointer or NULL
	*/
	Texture* getTexture();

	/**
	Assigns a texture to the material
	*/
	void setTexture(Texture *texture);

	/**
	@see Object.h
	*/
	void render();

	/**
	Returns "material"
	@see Object.h
	*/
	string getType();
};

